package iceCube.uhe.analysis;

import numRecipes.*;
import iceCube.uhe.analysis.*;
import java.io.*;
import java.util.*;

/**

   Run the neutrino model test based on the binned Poisson likelihood. 
   The PoissonBinnedLikelihoodCalculator :
   <pre>
   PoissonBinnedLikelihoodCalculator  calBG     (for the atmospheric background)
   PoissonBinnedLikelihoodCalculator  calSinal   (for the neutrino model such as GZK to be tested)
   PoissonBinnedLikelihoodCalculator  calNuisanceSingal (for the nuisance signal - like E^-2 against the GZK test) 
   </pre>
   are generated by the correponding binned data from the files and then executes the methods
   provied by ModelTestByPoissonBinnedLikelihoodFactory.


The likeliihood ratio type is following:                                                                              
  <pre> 
  1   saturated likelihood/null hypothesis(bg + model signal (+ nuisance))
  2   alternative hypothesis(bg + model signal with floated normalization)/null hypothesis(bg + model signal (+ nuisance))
  3   saturated likelihood/alternative hypothesis (bg + model signal with floated normalization)
  4   (bg + nuisance model signal with floated normalization)/(bg + model signal with floated normalization)
 </pre>

*/
public class RunModelTestByPoissonBinnedLikelihood {

    public static void main(String[] args) throws IOException{

        PoissonBinnedLikelihoodCalculator calBG = null;
        PoissonBinnedLikelihoodCalculator calSignal = null;
        PoissonBinnedLikelihoodCalculator calNuisanceSignal = null;
	ModelTestByPoissonBinnedLikelihoodFactory testFactory = null;
        boolean debugMode = false;
	boolean includeNuisance = false;
	boolean runReplicaExperiment = false;
	boolean nuisanceAlternative = false;
	boolean DataIsMap = false;
	int likelihoodRatioType = 1;

        String sigEventRateFileName = null;
        String nuisanceSigEventRateFileName = null;
        String bgEventRateFileName = null;

        if(args.length<4){
            System.out.println("Usage: RunModelTestByPoissonBinnedLikelihood filename-to-read-BGdata filename-to-read-SIGdata likelihood-ratio-type dataIsMap(yes 1 no 0)");
            System.exit(0);
        }else {
            bgEventRateFileName = args[0];
            sigEventRateFileName = args[1];
	    likelihoodRatioType = Integer.valueOf(args[2]).intValue();
	    int index = Integer.valueOf(args[3]).intValue();
	    if(index == 1)  DataIsMap = true;
	    if(DataIsMap) System.err.println(" Binned Data in Map format is read out");
	    System.err.format(" likelihood ratio type = %d\n",likelihoodRatioType);
	}

        // BG : background-only hypothesis
	if(!DataIsMap){
	    calBG = new PoissonBinnedLikelihoodCalculator();
	    if(debugMode) calBG.debugFlag = true;
	    DataInputStream in = 
		new DataInputStream(ClassLoader.getSystemResourceAsStream(bgEventRateFileName));
	    calBG.fillData(in);
	    in.close();
	}else{
	    FileInputStream in = new FileInputStream(bgEventRateFileName);
	    ObjectInputStream objectIn = new ObjectInputStream(in);
	    Map bgBinnedDataMap = null;
	    try{
		bgBinnedDataMap = (Map )objectIn.readObject();
	    }catch(ClassNotFoundException e){
		System.err.println("Caught ClassNotFoundException: " + 
				   e.getMessage( ));
		System.exit(0);
	    }
	    in.close();
	    calBG = PoissonBinnedLHExtracter.getPoisonBinnedLikelihoodCalculator(bgBinnedDataMap);
	}

	// SIG : neutrino model to be tested
	if(!DataIsMap){
	    calSignal = new PoissonBinnedLikelihoodCalculator();
	    if(debugMode) calSignal.debugFlag = true;
	    DataInputStream in = 
		new DataInputStream(ClassLoader.getSystemResourceAsStream(sigEventRateFileName));
	    calSignal.fillData(in);
	    in.close();
	}else{
	    FileInputStream in = new FileInputStream(sigEventRateFileName);
	    ObjectInputStream objectIn = new ObjectInputStream(in);
	    Map modelBinnedDataMap = null;
	    try{
		modelBinnedDataMap = (Map )objectIn.readObject();
	    }catch(ClassNotFoundException e){
		System.err.println("Caught ClassNotFoundException: " + 
				   e.getMessage( ));
		System.exit(0);
	    }
	    in.close();
	    calSignal = 
		PoissonBinnedLHExtracter.getPoisonBinnedLikelihoodCalculator(modelBinnedDataMap);
	}

        // SIG: nuisance model
        DataInputStream input = new DataInputStream(System.in); 
        BufferedReader  d     = new BufferedReader(new InputStreamReader(input)); 
        String buffer; 
	System.err.print("Include Nuisance signal model? (yes 1 no 0) ->"); 
        buffer   = d.readLine(); 
	if(Integer.valueOf(buffer).intValue()==1) {
	    includeNuisance = true;
	    if(includeNuisance){ // read out binned data of the nuisance model
		System.err.print("file name containing the binned data of the nuisance model ->"); 
		buffer   = d.readLine(); 
		nuisanceSigEventRateFileName = buffer;
		if(!DataIsMap){
		    calNuisanceSignal = new PoissonBinnedLikelihoodCalculator();
		    if(debugMode) calNuisanceSignal.debugFlag = true;
		    DataInputStream in = new DataInputStream(ClassLoader.getSystemResourceAsStream(nuisanceSigEventRateFileName));
		    calNuisanceSignal.fillData(in);
		    in.close();
		}else{
		    FileInputStream in = new FileInputStream(nuisanceSigEventRateFileName);
		    ObjectInputStream objectIn = new ObjectInputStream(in);
		    Map nuisanceModelBinnedDataMap = null;
		    try{
			nuisanceModelBinnedDataMap = (Map )objectIn.readObject();
		    }catch(ClassNotFoundException e){
			System.err.println("Caught ClassNotFoundException: " + 
					   e.getMessage( ));
			System.exit(0);
		    }
		    in.close();
		    calNuisanceSignal = 
			PoissonBinnedLHExtracter.getPoisonBinnedLikelihoodCalculator(nuisanceModelBinnedDataMap);
		}
	    }
	}

	System.err.print("Run Replica experiments? (yes 1 no 0) ->");
        buffer   = d.readLine();
 	if(Integer.valueOf(buffer).intValue()==1) {
	    runReplicaExperiment = true;
	    if(runReplicaExperiment) System.err.println("  Run replica experiments!");
	}

	// generate the ModelTestByPoissonBinnedLikelihoodFactory.
	if(!includeNuisance){ // no nuisance model
	    testFactory = new ModelTestByPoissonBinnedLikelihoodFactory(calBG, calSignal);
	}else{
	    testFactory = new ModelTestByPoissonBinnedLikelihoodFactory(calBG, calSignal, calNuisanceSignal);
	    System.err.print("include nuisance for null hypothesis calculation ? (yes 1 no 0) ->"); 
	    buffer   = d.readLine(); 
	    if(Integer.valueOf(buffer).intValue()== 0) {
		testFactory.doNotIncludeNuisanceSignal();
		System.err.println("Do NOT include  nuisance for null hypothesis calculation."); 
		nuisanceAlternative = true;
	    }
	}

	// the lilelihood of null hypothesis (model + bg)
	double llhNull = testFactory.buildLikelihoodForNullHypothesis(runReplicaExperiment);
	double llhSaturated = testFactory.buildLikelihoodForAlternativeHypothesis(true,runReplicaExperiment);
	double llhSignalFloated = testFactory.buildLikelihoodForAlternativeHypothesis(false,runReplicaExperiment);
	double llhNuisanceSignalFloated = 0.0;
	if(nuisanceAlternative) 
	    llhNuisanceSignalFloated = testFactory.buildLikelihoodForAlternativeHypothesis(false,true,runReplicaExperiment);
	double  maximizedFactor = testFactory.getModelNormalizationToMaximizeLikelihood();

	System.out.format("llh Null = %e\n",llhNull);
	System.out.format("llh Saturated = %e\n",llhSaturated);
	System.out.format("llh signal Floated = %e\n",llhSignalFloated);
	System.out.format("normalization to maximize llh = %e\n",maximizedFactor);
	if(nuisanceAlternative) 
	    System.out.format("llh nuisance signal Floated = %e\n",llhNuisanceSignalFloated);


	if(runReplicaExperiment) {
	    System.err.print("Run Many Replica experiments and build the llh ratio pdf (yes 1 no 0) ->"); 
	    buffer   = d.readLine(); 
	    if(Integer.valueOf(buffer).intValue()==1) {
		System.err.print("File name to store lists of the llh ratio->"); 
		buffer   = d.readLine(); 
		String outputLLHRatioFileName = buffer;
		System.err.format(" OK will store the results in the file %s\n",outputLLHRatioFileName); 
		String outputMaximizedFactorFileName = null;
		if(likelihoodRatioType>=2){
		    System.err.print("File name to store the norm factor to max the llh ratio->"); 
		    buffer   = d.readLine(); 
		    outputMaximizedFactorFileName = buffer;
		    System.err.format(" OK will store the results in the file %s\n",outputMaximizedFactorFileName); 
		}
		int runTimes = 500000;
		testFactory.makeCollectionOfLogLikelihoodRatio(likelihoodRatioType,runTimes);
		FileOutputStream out = new FileOutputStream(outputLLHRatioFileName); 
		ModelTestByPoissonBinnedLikelihoodFactory.outputLikelihhoRatioList(testFactory,out);
		out.close();
		if(likelihoodRatioType>=2){
		    out = new FileOutputStream(outputMaximizedFactorFileName);
		    ModelTestByPoissonBinnedLikelihoodFactory.outputMaximizedSignalFactorList(testFactory,out);
		    out.close();
		}

	    }
	}

    }

   
}